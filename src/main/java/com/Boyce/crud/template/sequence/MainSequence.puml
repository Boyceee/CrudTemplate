@startuml
participant Request
participant Server
participant DispatcherServlet
participant CrudHandlerMapping
participant CrudHandlerAdapter
participant CrudController
participant CrudServiceImpl

Server -> Server : CrudController.addCrudInterface(String path,Object object)
Server -> Server : SpringApplication.run()
Request -> Server : ip:port/path/query
Server -> DispatcherServlet : doService()
DispatcherServlet -> DispatcherServlet : handle parameter
note left : DispatcherServlet.doDispatch begin
DispatcherServlet -> CrudHandlerMapping : getHandlerInternal()
note right
CrudHandlerMapping
for(Entry<String,Object> entry :
CrudController.getDispatchedInterfaces.
entrySet())
if path.startWitch entry.key
    return CrudController.getMethod("dispatch")
end note
CrudHandlerMapping -> DispatcherServlet : return Handler
DispatcherServlet -> DispatcherServlet : HandlerAdapter ha = getHandlerAdapter(handler)
DispatcherServlet -> CrudHandlerAdapter : supports(handler)
note right
if o match CrudController.getMethod("dispatch")
    return true
end note
CrudHandlerAdapter -> DispatcherServlet : true
DispatcherServlet -> CrudHandlerAdapter : ModelAndView mv = adapter.handle(...)
CrudHandlerAdapter -> CrudHandlerAdapter : Method method = (method) handler
CrudHandlerAdapter -> CrudController : method.invoke(...)
CrudController -> CrudServiceImpl : List<Map<String, Object>> dataList = query(dispatchedInterfaces.get(entry.getKey()))
CrudServiceImpl -> CrudServiceImpl : Map<String realField,String sqlField> fieldsMap = getFields(object)
note left
if(field.isAnnotationPresent(...))
    map.put(field.getName(),field.getAnnotation(...).name())
else
    map.put(field.getName(),field.getName())
end note
CrudServiceImpl -> CrudServiceImpl : Map<String,String> tableMap = getTable(object)
note left
if(object.getClass().isAnnotationPresent(...))
    tableMap.put(object.getClass().getName(),object.getClass().getAnnotation(...).name())
else
    tableMap.put(object.getClass().getName(),object.getClass().getName())
return tableMap
end note
CrudServiceImpl -> CrudServiceImpl : List<Map<String, Object>> list = jdbcOperations.queryForList(...)
CrudServiceImpl -> CrudServiceImpl : String json = parseListToJson(list)
CrudServiceImpl -> CrudController : return json
CrudController -> CrudController : response.getWriter.print(json)
CrudController -> Server : return json
Server -> Request : return json
@enduml